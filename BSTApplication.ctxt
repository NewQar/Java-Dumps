#BlueJ class context
comment0.target=BSTApplication
comment1.params=
comment1.target=boolean\ isEmpty()
comment10.params=
comment10.target=int\ calculateHeight()
comment11.params=current
comment11.target=int\ calculateHeightRecursive(MyBST.Node)
comment12.params=value
comment12.target=int\ findLevel(int)
comment13.params=current\ value\ level
comment13.target=int\ findLevelRecursive(MyBST.Node,\ int,\ int)
comment14.params=
comment14.target=int\ countNodes()
comment15.params=current
comment15.target=int\ countNodesRecursive(MyBST.Node)
comment16.params=
comment16.target=int\ countLeaves()
comment17.params=current
comment17.target=int\ countLeavesRecursive(MyBST.Node)
comment18.params=
comment18.target=int\ findMinimum()
comment19.params=
comment19.target=int\ findMaximum()
comment2.params=value
comment2.target=void\ insert(int)
comment20.params=
comment20.target=int\ calculateTotal()
comment21.params=current
comment21.target=int\ calculateTotalRecursive(MyBST.Node)
comment22.params=
comment22.target=double\ calculateAverage()
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment3.params=current\ value
comment3.target=MyBST.Node\ insertRecursive(MyBST.Node,\ int)
comment4.params=
comment4.target=void\ preorderTraversal()
comment5.params=current
comment5.target=void\ preorderTraversalRecursive(MyBST.Node)
comment6.params=
comment6.target=void\ inorderTraversal()
comment7.params=current
comment7.target=void\ inorderTraversalRecursive(MyBST.Node)
comment8.params=
comment8.target=void\ postorderTraversal()
comment9.params=current
comment9.target=void\ postorderTraversalRecursive(MyBST.Node)
numComments=24
